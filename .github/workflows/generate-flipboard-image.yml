name: Generate Flip Board Image

on:
  schedule:
    # Run every 4 hours
    - cron: "0 */4 * * *"
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [main]
    paths:
      - "js/app.js"
      - "css/flipboard.css"
      - "index.html"

jobs:
  generate-image:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm init -y
          npm install puppeteer sharp

      - name: Create screenshot script
        run: |
          cat > screenshot.js << 'EOF'
          const puppeteer = require('puppeteer');
          const sharp = require('sharp');
          const fs = require('fs');
          const path = require('path');

          // Helper function to wait for a specified time
          const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

          (async () => {
            let browser;
            try {
              browser = await puppeteer.launch({
                headless: 'new',
                args: [
                  '--no-sandbox',
                  '--disable-setuid-sandbox',
                  '--disable-dev-shm-usage',
                  '--disable-accelerated-2d-canvas',
                  '--no-first-run',
                  '--no-zygote',
                  '--disable-gpu',
                  '--disable-web-security',
                  '--disable-features=VizDisplayCompositor'
                ]
              });
              
              const page = await browser.newPage();
              
              // Set viewport to portrait dimensions (1236×1648)
              await page.setViewport({
                width: 1236,
                height: 1648,
                deviceScaleFactor: 1
              });
              
              // Navigate to the local HTML file
              const htmlPath = path.resolve('./index.html');
              console.log('Loading page:', htmlPath);
              
              await page.goto(`file://${htmlPath}`, { 
                waitUntil: 'networkidle0',
                timeout: 30000 
              });
              
              console.log('Page loaded, waiting for main content...');
              
              // Wait for the video element to be present
              await page.waitForSelector('#intro_video', { timeout: 30000 });
              
              // Wait for main content to be visible
              await page.waitForSelector('#main_content', { timeout: 30000 });
              
              // Force scroll to main content and hide video
              await page.evaluate(() => {
                // Hide the video completely
                const video = document.getElementById('intro_video');
                if (video) {
                  video.style.display = 'none';
                }
                
                // Ensure main content is visible and positioned correctly
                const mainContent = document.getElementById('main_content');
                if (mainContent) {
                  mainContent.scrollIntoView({ behavior: 'instant' });
                  // Make sure it's at the top of the viewport
                  window.scrollTo(0, mainContent.offsetTop);
                }
                
                // Scale up the flip board for better visibility
                const flipBoard = document.querySelector('.flip-board');
                if (flipBoard) {
                  flipBoard.style.transform = 'perspective(1000px) rotateX(2deg) rotateY(3deg) scale(1.6)';
                }
              });
              
              console.log('Video hidden, waiting for flip board...');
              
              // Wait for the flip board to be initialized
              await page.waitForSelector('#flipDisplay', { timeout: 30000 });
              
              // Wait for flip board content to be populated
              await page.waitForFunction(() => {
                const flipDisplay = document.getElementById('flipDisplay');
                return flipDisplay && flipDisplay.children.length > 0;
              }, { timeout: 30000 });
              
              console.log('Flip board found, waiting for data and animations...');
              
              // Wait longer for data to load and animations to complete
              await wait(12000);
              
              // Ensure all animations are complete by checking for flipping class
              await page.waitForFunction(() => {
                const flippingCards = document.querySelectorAll('.flip-card.flipping');
                return flippingCards.length === 0;
              }, { timeout: 15000 });
              
              console.log('Animations complete, taking screenshot...');
              
              // Take a full page screenshot
              const screenshot = await page.screenshot({
                type: 'png',
                fullPage: false,
                clip: {
                  x: 0,
                  y: 0,
                  width: 1236,
                  height: 1648
                }
              });
              
              console.log('Screenshot captured, optimizing for Kindle...');
              
              // Process image for Kindle Paperwhite optimization
              await sharp(screenshot)
                .greyscale()
                .gamma(0.85)  // Moderate brightening to compensate for greyscale darkening
                .modulate({
                  brightness: 1.25,  // Moderate brightness increase to restore white backgrounds
                  contrast: 1.05     // Slight contrast boost for better text readability
                })
                .sharpen()  // Sharpen for better text clarity
                .png({
                  quality: 100,
                  compressionLevel: 6,
                  adaptiveFiltering: true
                })
                .toFile('flipboard.png');
              
              console.log('Screenshot saved as flipboard.png (1236×1648, Kindle optimized)');
              
            } catch (error) {
              console.error('Error during screenshot process:', error);
              throw error;
            } finally {
              if (browser) {
                await browser.close();
              }
            }
          })();
          EOF

      - name: Generate screenshot
        run: node screenshot.js

      - name: Check if image was generated
        run: |
          if [ ! -f "flipboard.png" ]; then
            echo "Error: Screenshot was not generated"
            exit 1
          fi
          echo "Screenshot generated successfully"
          ls -la flipboard.png

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add flipboard.png
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update flip board snapshot - $(date -u)"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
